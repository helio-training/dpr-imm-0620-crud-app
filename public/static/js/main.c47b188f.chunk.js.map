{"version":3,"sources":["components/UpsertGame.js","components/Game.js","components/CreateGame.js","components/Games.js","App.js","serviceWorker.js","index.js"],"names":["UpsertGame","state","title","props","game","developer","platforms","handleSubmit","event","preventDefault","fetch","process","_id","method","headers","body","JSON","stringify","then","response","json","data","console","log","toggleForm","refresh","handleChange","setState","target","name","value","handlePlatformsChange","index","updatedPlatforms","concat","addPlatform","newPlatforms","removePlatform","splice","platformInputs","this","map","platform","type","placeholder","onChange","required","className","onClick","onSubmit","id","React","Component","Game","deleteGame","useState","update","setUpdate","class","CreateGame","Games","games","getGames","bind","displayGames","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c47b188f.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class UpsertGame extends React.Component {\n    state = {\n        title: this.props.game.title,\n        developer: this.props.game.developer,\n        platforms: this.props.game.platforms\n    }\n    handleSubmit = (event) => {\n        event.preventDefault();\n        const api_url = process.env.REACT_APP_API_URL;\n        fetch(`${api_url}/games/${this.props.game._id}`, {\n            method: \"PUT\", \n            headers: {\n                \"Content-Type\": \"application/json\"\n            }, \n            body: JSON.stringify(this.state)\n        }).then(response => response.json())\n          .then(data => console.log(data))\n          .then(this.props.toggleForm)\n          .then(this.props.refresh)\n    }\n    handleChange = (event) => {\n        this.setState({ [event.target.name] : event.target.value });\n    }\n    handlePlatformsChange = (event, index) => {\n        const updatedPlatforms = this.state.platforms.concat([]);\n        updatedPlatforms[index] = event.target.value;\n        this.setState({platforms: updatedPlatforms});\n    }\n    addPlatform = (event) => {\n        const newPlatforms = this.state.platforms.concat([ \"\" ]);\n        this.setState({platforms:newPlatforms});\n    }\n    removePlatform = (index) => {\n        const newPlatforms = this.state.platforms.concat([]);\n        newPlatforms.splice(index, 1);\n        this.setState({ platforms: newPlatforms });\n    }\n    render(){\n        const platformInputs = this.state.platforms.map((platform, index) => {\n            return (\n                <div>\n                    <input name={index}\n                        type=\"text\"\n                        // placeholder=\"Platform\"\n                        placeholder={`Platform ${index + 1}`}\n                        value={platform}\n                        onChange={(event) => this.handlePlatformsChange(event, index)} \n                        required/>\n                    <input className=\"remove-platform\"\n                        type=\"button\"\n                        value=\"-\"\n                        onClick={()=> this.removePlatform(index)}/>\n                </div>\n                \n            )\n        })\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <input name=\"title\"\n                    type=\"text\"\n                    placeholder=\"Title\"\n                    value={this.state.title}\n                    onChange={this.handleChange}\n                    required/>\n                <input name=\"developer\"\n                    type=\"text\"\n                    placeholder=\"Developer\"\n                    value={this.state.developer}\n                    onChange={this.handleChange}/>\n                {platformInputs}\n                <input id=\"add_platform\" \n                    type=\"button\" \n                    value=\"Add Platform\"\n                    onClick={this.addPlatform}/>\n                <input type=\"submit\" value=\"Update Game\"/>\n            </form>\n        )\n    }\n}","import React, { useState } from 'react'\nimport UpsertGame from './UpsertGame'\n\n// const Game = (props) => {\nconst Game = ({game, deleteGame, refresh}) => {\n    const [update, setUpdate] = useState(false);\n    const toggleForm = () => setUpdate(!update);\n    return (\n        <li>\n            {game.title}\n            <i onClick={() => toggleForm()}\n                class=\"fa fa-gear\"></i>\n            \n            <i onClick={() => deleteGame(game._id, refresh)} \n                className=\"fa fa-trash-o del-btn\"></i>\n            \n            {update ? \n                <UpsertGame game={game}\n                    toggleForm={toggleForm}\n                    refresh={refresh}/> \n                : ''}\n        </li>\n    )\n}\n\nexport default Game","import React from 'react';\n\nexport default class CreateGame extends React.Component {\n    state = {\n        title: \"\",\n        developer: \"\",\n        platforms: [ \"\" ]\n    }\n    handleSubmit = (event) => {\n        event.preventDefault();\n        const api_url = process.env.REACT_APP_API_URL;\n        fetch(`${api_url}/games`, {\n            method: \"POST\", \n            headers: {\n                \"Content-Type\": \"application/json\"\n            }, \n            body: JSON.stringify(this.state)\n        }).then(response => response.json())\n          .then(data => console.log(data))\n          .then(() => {\n              this.setState({\n                  title: \"\",\n                  developer: \"\",\n                  platforms: [\"\"]\n              })\n          }).then(this.props.refresh)\n    }\n    handleChange = (event) => {\n        this.setState({ [event.target.name] : event.target.value });\n    }\n    handlePlatformsChange = (event, index) => {\n        const updatedPlatforms = this.state.platforms.concat([]);\n        updatedPlatforms[index] = event.target.value;\n        this.setState({platforms: updatedPlatforms});\n    }\n    addPlatform = (event) => {\n        const newPlatforms = this.state.platforms.concat([ \"\" ]);\n        this.setState({platforms:newPlatforms});\n    }\n    removePlatform = (index) => {\n        const newPlatforms = this.state.platforms.concat([]);\n        newPlatforms.splice(index, 1);\n        this.setState({ platforms: newPlatforms });\n    }\n    render(){\n        const platformInputs = this.state.platforms.map((platform, index) => {\n            return (\n                <div>\n                    <input name={index}\n                        type=\"text\"\n                        // placeholder=\"Platform\"\n                        placeholder={`Platform ${index + 1}`}\n                        value={platform}\n                        onChange={(event) => this.handlePlatformsChange(event, index)} \n                        required/>\n                    <input className=\"remove-platform\"\n                        type=\"button\"\n                        value=\"-\"\n                        onClick={()=> this.removePlatform(index)}/>\n                </div>\n                \n            )\n        })\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <input name=\"title\"\n                    type=\"text\"\n                    placeholder=\"Title\"\n                    value={this.state.title}\n                    onChange={this.handleChange}\n                    required/>\n                <input name=\"developer\"\n                    type=\"text\"\n                    placeholder=\"Developer\"\n                    value={this.state.developer}\n                    onChange={this.handleChange}/>\n                {platformInputs}\n                <input id=\"add_platform\" \n                    type=\"button\" \n                    value=\"Add Platform\"\n                    onClick={this.addPlatform}/>\n                <input type=\"submit\" value=\"Add Game\"/>\n            </form>\n        )\n    }\n}","import React from 'react';\nimport Game from './Game';\nimport CreateGame from './CreateGame';\n\nclass Games extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            games: []\n        }\n        this.getGames = this.getGames.bind(this);\n    }\n    // Track this.state\n    \n    // componentDidMount() calls a function to fetch()\n    getGames () {\n        const api_url = process.env.REACT_APP_API_URL;\n        fetch(`${api_url}/games`)\n            .then(response => response.json())\n            .then(data => this.setState({games:data}))\n    }\n    componentDidMount(){\n        this.getGames();\n    }\n    deleteGame(id, refresh) {\n        const api_url = process.env.REACT_APP_API_URL;\n        fetch(`${api_url}/games/${id}`,{\n            method: \"DELETE\"\n        }).then(response => response.json())\n            .then(data => {\n                console.log(data);\n                refresh();\n            })\n    }\n    // render() list of Games\n    render() {\n        const displayGames = this.state.games.map(game => \n            // Game(game, deleteGame, refresh)\n            <Game \n                key={game._id} \n                game={game}\n                deleteGame={this.deleteGame}\n                refresh={this.getGames}/>\n        );\n        return (\n            <>\n                <CreateGame refresh={this.getGames}/>\n                <ul>\n                    {displayGames}\n                </ul>\n            </>\n        )\n    }\n\n}\n\nexport default Games;","import React from 'react';\nimport './App.css';\nimport Games from './components/Games'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>Games</h2>\n      <Games/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}